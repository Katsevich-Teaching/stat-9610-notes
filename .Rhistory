predicted_ed <- numeric(length(mu_1_vals))
simulated_ed <- numeric(length(mu_1_vals))
bonferroni_ed <- numeric(length(mu_1_vals))
for(idx in 1:length(mu_1_vals)){
predicted_ed[idx] <- predict_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
simulated_ed[idx] <- simulate_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
bonferroni_ed[idx] <- predict_bonferroni_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
}
data.frame(mu_1 = mu_1_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = mu_1)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
geom_line(aes(y = bonferroni_ed, color = "Bonferroni")) +
geom_point(aes(y = bonferroni_ed, color = "Bonferroni")) +
labs(title = "Expected discoveries vs. signal strength",
x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "blue", "Simulated" = "red", "Bonferroni" = "green")) +
theme_bw()
data.frame(mu_1 = mu_1_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = mu_1)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
geom_line(aes(y = bonferroni_ed, color = "Bonferroni")) +
geom_point(aes(y = bonferroni_ed, color = "Bonferroni")) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "blue", "Simulated" = "red", "Bonferroni" = "green")) +
theme_bw()
m <- 100                         # number of hypotheses
pi <- 0.4                        # proportion of non-nulls
mu_1_vals <- seq(0, 5, by = 0.5) # signal strength
rho <- 0                         # correlation
alpha <- 0.1                     # FDR level
predicted_ed <- numeric(length(mu_1_vals))
simulated_ed <- numeric(length(mu_1_vals))
bonferroni_ed <- numeric(length(mu_1_vals))
for(idx in 1:length(mu_1_vals)){
predicted_ed[idx] <- predict_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
simulated_ed[idx] <- simulate_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
bonferroni_ed[idx] <- predict_bonferroni_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
}
data.frame(mu_1 = mu_1_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = mu_1)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
geom_line(aes(y = bonferroni_ed, color = "Bonferroni")) +
geom_point(aes(y = bonferroni_ed, color = "Bonferroni")) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "blue", "Simulated" = "red", "Bonferroni" = "green")) +
theme_bw()
compute_cholesky <- function(n, rho) {
# Check if rho is within the valid range
if (rho < -1 || rho > 1) {
stop("Correlation coefficient rho must be between -1 and 1.")
}
if (n <= 0 || n != as.integer(n)) {
stop("Matrix size n must be a positive integer.")
}
# Create an n x n matrix filled with zeros
C <- matrix(0, nrow = n, ncol = n)
# Set C[1,1] = 1
C[1, 1] <- 1
if (n >= 2) {
# Set C[i,1] = rho for i = 2 to n
C[2:n, 1] <- rho
# Set C[i,i] = sqrt(1 - rho^2) for i = 2 to n
diag(C)[2:n] <- sqrt(1 - rho^2)
}
return(C)
}
C <- compute_cholesky(5, 0.5)
C %*% t(C)
t(C) %*% C
C %*% t(C)
compute_cholesky <- function(n, rho) {
# Validate input parameters
if (rho <= -1 / (n - 1) || rho >= 1) {
stop("Correlation coefficient rho must be between -1/(n-1) and 1.")
}
if (n <= 0 || n != as.integer(n)) {
stop("Matrix size n must be a positive integer.")
}
# Construct the equicorrelated covariance matrix Sigma
Sigma <- matrix(rho, n, n)
diag(Sigma) <- 1
# Perform the Cholesky decomposition
C_upper <- chol(Sigma)
# Convert the upper-triangular matrix to lower-triangular
C <- t(C_upper)
return(C)
}
C <- compute_cholesky(5, 0.5)
C
C %*% t(C)
# generate multivariate normal data
Sigma <- matrix(rho, m, m)
diag(Sigma) <- 1
C_upper <- t(chol(Sigma))
C <- t(chol(Sigma))
C %*% t(C)
m
m <- 5
rho
rho <- 0.2
# generate multivariate normal data
Sigma <- matrix(rho, m, m)
diag(Sigma) <- 1
C <- t(chol(Sigma))
C %*% t(C)
generate_pvalues <- function(m, pi, mu_1, rho, B){
# generate multivariate normal data
Sigma <- matrix(rho, m, m)
diag(Sigma) <- 1
C <- t(chol(Sigma))
# generate the means
mu <- rep(0, m)
mu[1:round(m * pi)] <- mu_1
# generate the p-values
p_values <- matrix(NA, B, m)
for(b in 1:B){
Z <- mu + C %*% rnorm(m, mean = 0, sd = 1)
p_values[b,] <- pnorm(-abs(Z))
}
# return
p_values
}
simulate_expected_discoveries <- function(m, pi, mu_1, rho, alpha){
B <- 1000
num_discoveries <- numeric(B)
p_values <- generate_pvalues(m, pi, mu_1, rho, B)
for(b in 1:B){
num_discoveries[b] <- sum(p.adjust(p_values[b,], method = "BH") <= alpha)
}
mean(num_discoveries)
}
predict_bonferroni_expected_discoveries <- function(m, pi, mu_1, rho, alpha){
out <- generate_pvalues(m, pi, mu_1, rho)
mu <- out$mu
expected_discoveries(mu, alpha/m)
}
generate_pvalues <- function(m, pi, mu_1, rho, B){
# generate multivariate normal data
Sigma <- matrix(rho, m, m)
diag(Sigma) <- 1
C <- t(chol(Sigma))
# generate the means
mu <- rep(0, m)
mu[1:round(m * pi)] <- mu_1
# generate the p-values
p_values <- matrix(NA, B, m)
for(b in 1:B){
Z <- mu + C %*% rnorm(m, mean = 0, sd = 1)
p_values[b,] <- pnorm(-abs(Z))
}
# return
p_values
}
generate_pvalues <- function(m, pi, mu_1, rho, B){
# generate multivariate normal data
Sigma <- matrix(rho, m, m)
diag(Sigma) <- 1
C <- t(chol(Sigma))
# generate the means
mu <- rep(0, m)
mu[1:round(m * pi)] <- mu_1
# generate the p-values
p_values <- matrix(NA, B, m)
for(b in 1:B){
Z <- mu + C %*% rnorm(m, mean = 0, sd = 1)
p_values[b,] <- pnorm(-abs(Z))
}
# return
p_values
}
expected_discoveries <- function(mu, t){
sum(pnorm(qnorm(p = t) + mu))
}
compute_threshold <- function(mu, alpha){
fdp_hat <- function(t)(pmin(1, m * t / expected_discoveries(mu, t)))
m <- length(mu)
t_vals <- seq(alpha/m, alpha, length.out = 1000)
fdp_hat_vals <- sapply(t_vals, fdp_hat)
if(all(fdp_hat_vals > alpha)){
t_hat <- 0
} else{
t_hat <- t_vals[max(which(fdp_hat_vals <= alpha))]
}
t_hat
}
predict_expected_discoveries <- function(m, pi, mu_1, rho, alpha){
mu <- rep(0, m)
mu[1:round(m * pi)] <- mu_1
t_hat <- compute_threshold(mu, alpha)
expected_discoveries(mu, t_hat)
}
simulate_expected_discoveries <- function(m, pi, mu_1, rho, alpha){
B <- 1000
num_discoveries <- numeric(B)
p_values <- generate_pvalues(m, pi, mu_1, rho, B)
for(b in 1:B){
num_discoveries[b] <- sum(p.adjust(p_values[b,], method = "BH") <= alpha)
}
mean(num_discoveries)
}
predict_bonferroni_expected_discoveries <- function(m, pi, mu_1, rho, alpha){
mu <- rep(0, m)
mu[1:round(m * pi)] <- mu_1
expected_discoveries(mu, alpha/m)
}
m <- 100                         # number of hypotheses
pi <- 0.4                        # proportion of non-nulls
mu_1_vals <- seq(0, 5, by = 0.5) # signal strength
rho <- 0                         # correlation
alpha <- 0.1                     # FDR level
predicted_ed <- numeric(length(mu_1_vals))
simulated_ed <- numeric(length(mu_1_vals))
bonferroni_ed <- numeric(length(mu_1_vals))
for(idx in 1:length(mu_1_vals)){
predicted_ed[idx] <- predict_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
simulated_ed[idx] <- simulate_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
bonferroni_ed[idx] <- predict_bonferroni_expected_discoveries(m, pi, mu_1_vals[idx], rho, alpha)
}
data.frame(mu_1 = mu_1_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = mu_1)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
geom_line(aes(y = bonferroni_ed, color = "Bonferroni")) +
geom_point(aes(y = bonferroni_ed, color = "Bonferroni")) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "blue", "Simulated" = "red", "Bonferroni" = "green")) +
theme_bw()
data.frame(mu_1 = mu_1_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = mu_1)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw()
data.frame(mu_1 = mu_1_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = mu_1)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank())
m <- 100                          # number of hypotheses
pi <- 0.4                         # proportion of non-nulls
mu_1 <- 2.5                       # signal strength
rho_vals <- seq(0, 0.8, by = 0.1) # correlation
alpha <- 0.1                      # FDR level
predicted_ed <- numeric(length(rho_vals))
simulated_ed <- numeric(length(rho_vals))
bonferroni_ed <- numeric(length(rho_vals))
m <- 100                          # number of hypotheses
pi <- 0.4                         # proportion of non-nulls
mu_1 <- 2.5                       # signal strength
rho_vals <- seq(0, 0.8, by = 0.1) # correlation
alpha <- 0.1                      # FDR level
predicted_ed <- numeric(length(rho_vals))
simulated_ed <- numeric(length(rho_vals))
bonferroni_ed <- numeric(length(rho_vals))
for(idx in 1:length(mu_1_vals)){
predicted_ed[idx] <- predict_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
simulated_ed[idx] <- simulate_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
bonferroni_ed[idx] <- predict_bonferroni_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
}
for(idx in 1:length(mu_1_vals)){
print(idx)
predicted_ed[idx] <- predict_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
simulated_ed[idx] <- simulate_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
bonferroni_ed[idx] <- predict_bonferroni_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
}
rho_vals
for(idx in 1:length(rho_vals)){
predicted_ed[idx] <- predict_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
simulated_ed[idx] <- simulate_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
bonferroni_ed[idx] <- predict_bonferroni_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
}
data.frame(rho = rho_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = mu_1)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
labs(x = "Correlation",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank())
data.frame(rho = rho_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = rho)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
labs(x = "Correlation",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank())
data.frame(rho = rho_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed)
rho_vals
m <- 100                          # number of hypotheses
pi <- 0.4                         # proportion of non-nulls
mu_1 <- 2.5                       # signal strength
rho_vals <- seq(0, 0.8, by = 0.1) # correlation
alpha <- 0.1                      # FDR level
predicted_ed <- numeric(length(rho_vals))
simulated_ed <- numeric(length(rho_vals))
bonferroni_ed <- numeric(length(rho_vals))
for(idx in 1:length(rho_vals)){
predicted_ed[idx] <- predict_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
simulated_ed[idx] <- simulate_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
bonferroni_ed[idx] <- predict_bonferroni_expected_discoveries(m, pi, mu_1, rho_vals[idx], alpha)
}
data.frame(rho = rho_vals,
predicted_ed = predicted_ed,
simulated_ed = simulated_ed,
bonferroni_ed = bonferroni_ed) |>
ggplot(aes(x = rho)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
labs(x = "Correlation",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank())
m <- 100                         # number of hypotheses
pi <- 0.4                        # proportion of non-nulls
mu_1_vals <- seq(0, 5, by = 0.5) # signal strength
rho_vals <- c(0, 0.4, 0.8)       # correlation
alpha <- 0.1                     # FDR level
m <- 100                         # number of hypotheses
pi <- 0.4                        # proportion of non-nulls
mu_1_vals <- seq(0, 5, by = 0.5) # signal strength
rho_vals <- c(0, 0.4, 0.8)       # correlation
alpha <- 0.1                     # FDR level
num_mu_vals <- length(mu_1_vals)
num_rho_vals <- length(rho_vals)
ed <- array(NA, dim = c(num_mu_vals, num_rho_vals, 2),
dimnames = list(mu_1 = mu_1_vals, rho = rho_vals, method = c("Predicted", "Simulated")))
for(idx in 1:length(mu_1_vals)){
for(jdx in 1:length(rho_vals)){
ed[idx, jdx, "Predicted"] <- predict_expected_discoveries(m, pi, mu_1_vals[idx], rho_vals[jdx], alpha)
ed[idx, jdx, "Simulated"] <- simulate_expected_discoveries(m, pi, mu_1_vals[idx], rho_vals[jdx], alpha)
}
}
ed |>
reshape2::melt()
ed |>
reshape2::melt(value.name = "ed") |>
ggplot(aes(x = mu_1)) +
geom_line(aes(y = predicted_ed, color = "Predicted")) +
geom_point(aes(y = simulated_ed, color = "Simulated")) +
geom_line(aes(y = simulated_ed, color = "Simulated")) +
geom_point(aes(y = predicted_ed, color = "Predicted")) +
facet_wrap(~rho, scales = "free") +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank())
ed |>
reshape2::melt(value.name = "ed") |>
ggplot(aes(x = mu_1, y = ed, color = method)) +
geom_line() +
geom_point() +
facet_wrap(~rho, scales = "free") +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank())
ed |>
reshape2::melt(value.name = "ed") |>
ggplot(aes(x = mu_1, y = ed, color = method)) +
geom_line() +
geom_point() +
facet_wrap(~rho, scales = "free") +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom")
ed |>
reshape2::melt(value.name = "ed") |>
ggplot(aes(x = mu_1, y = ed, color = method)) +
geom_line() +
geom_point() +
facet_wrap(~rho) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom")
ed |>
reshape2::melt(value.name = "ed") |>
ggplot(aes(x = mu_1, y = ed, color = method)) +
geom_line() +
geom_point() +
facet_wrap(~rho, labeller = label_both) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted" = "darkblue", "Simulated" = "darkred")) +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom")
ed <- array(NA, dim = c(num_mu_vals, num_rho_vals, 3),
dimnames = list(mu_1 = mu_1_vals, rho = rho_vals,
method = c("Predicted BH", "Simulated BH", "Bonferroni")))
for(idx in 1:length(mu_1_vals)){
for(jdx in 1:length(rho_vals)){
ed[idx, jdx, "Predicted BH"] <- predict_expected_discoveries(m, pi, mu_1_vals[idx], rho_vals[jdx], alpha)
ed[idx, jdx, "Simulated BH"] <- simulate_expected_discoveries(m, pi, mu_1_vals[idx], rho_vals[jdx], alpha)
ed[idx, jdx, "Bonferroni"] <- predict_bonferroni_expected_discoveries(m, pi, mu_1_vals[idx], rho_vals[jdx], alpha)
}
}
ed |>
reshape2::melt(value.name = "ed") |>
ggplot(aes(x = mu_1, y = ed, color = method)) +
geom_line() +
geom_point() +
facet_wrap(~rho, labeller = label_both) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted BH" = "darkblue",
"Simulated BH" = "darkred",
"Bonferroni" = "darkgreen")) +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom")
ed |>
reshape2::melt(value.name = "ed") |>
ggplot(aes(x = mu_1, y = ed, color = method)) +
geom_line() +
geom_point() +
geom_hline(yintercept = round(pi * m), linetype = "dashed") +
facet_wrap(~rho, labeller = label_both) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted BH" = "darkblue",
"Simulated BH" = "darkred",
"Bonferroni" = "darkgreen")) +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom")
p <- ed |>
reshape2::melt(value.name = "ed") |>
ggplot(aes(x = mu_1, y = ed, color = method)) +
geom_line() +
geom_point() +
geom_hline(yintercept = round(pi * m), linetype = "dashed") +
facet_wrap(~rho, labeller = label_both) +
labs(x = "Signal strength",
y = "Expected discoveries") +
scale_color_manual(values = c("Predicted BH" = "darkblue",
"Simulated BH" = "darkred",
"Bonferroni" = "darkgreen")) +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom")
ggsave(filename = "bh-approximation.png",
plot = p, width = 6, height = 2.5, units = "in", dpi = 300)
ggsave(filename = "bh-approximation.png",
plot = p, width = 5, height = 2.5, units = "in", dpi = 300)
ggsave(filename = "bh-approximation.png",
plot = p, width = 5, height = 3, units = "in", dpi = 300)
ggsave(filename = "bh-approximation.png",
plot = p, width = 6, height = 3, units = "in", dpi = 300)
