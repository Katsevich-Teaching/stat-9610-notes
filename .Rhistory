54/6
quarto render
quarto render
quarto render
library(knitr)
kable(
matrix(c(9, 12, 21, 7, 17, 24, 16, 29, 45),
nrow = 3,
dimnames = list(c("Treatment", "Control", "Total"),
c("Success", "Failure", "Total"))),
format = "pipe",
caption = "An example of a $2 \\times 2$ contingency table."
)
scores_by_year <- tibble(
Name = c("Alice", "Bob", "Charlie"),
`2020` = c(85, 90, 87),
`2021` = c(88, 91, 85)
)
library(tidyverse)
scores_by_year <- tibble(
Name = c("Alice", "Bob", "Charlie"),
`2020` = c(85, 90, 87),
`2021` = c(88, 91, 85)
)
scores_by_year
scores_by_year
scores_by_year %>%
pivot_longer(cols = `2020`:`2021`, names_to = "Year", values_to = "Score")
2/3*160
2/3*160/24
n <- 25
p <- 2
p <- 2
x <- rnorm(n)
data <- tibble(x, y)
alpha <- 0.05
lm_fit <- lm(y ~ x, data = data)
n <- 25
p <- 2
x <- rnorm(n)
y <- 1 + 2*x + rnorm(n)
data <- tibble(x, y)
library(tidyverse)
library(tidyverse)
n <- 25
p <- 2
x <- rnorm(n)
y <- 1 + 2*x + rnorm(n)
data <- tibble(x, y)
alpha <- 0.05
lm_fit <- lm(y ~ x, data = data)
predictions <- predict(lm_fit, se.fit = TRUE)
t_quantile <- qt(1 - alpha / 2, df = n - p)
f_quantile <- qf(1 - alpha, df1 = p, df2 = n - p)
data |>
mutate(
fit = predictions$fit,
se = predictions$se.fit,
ptwise_width = t_quantile * se,
simultaneous_width = sqrt(p * f_quantile) * se
) |>
ggplot(aes(x = x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = fit), color = "blue") +
geom_line(aes(y = fit + ptwise_width, color = "Pointwise")) +
geom_line(aes(y = fit - ptwise_width, color = "Pointwise")) +
geom_line(aes(y = fit + simultaneous_width, color = "Simultaneous")) +
geom_line(aes(y = fit - simultaneous_width, color = "Simultaneous")) +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom")
set.seed(1)
n <- 25
p <- 2
x <- rnorm(n)
y <- 1 + 2*x + rnorm(n)
set.seed(1)
n <- 200
x <- rnorm(n)
y <- 1 + 2*x + rnorm(n)
data <- tibble(x, y)
lm_fit <- lm(y ~ x, data = data)
residuals <- residuals(lm_fit)
tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram()
tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram() +
theme_bw()
tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram(bins = 30) +
theme_bw()
tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram(bins = 30, color = "black") +
theme_bw()
residuals <- rstandard(lm_fit)
tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram(bins = 30, color = "black") +
theme_bw()
tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram(bins = 20, color = "black") +
theme_bw()
library(tidyverse)
set.seed(1)
n <- 500
x <- rnorm(n)
y <- 1 + 2*x + rnorm(n)
lm_fit <- lm(y ~ x, data = data)
residuals <- rstandard(lm_fit)
tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram(bins = 20, color = "black") +
theme_bw()
qqplot(residuals)
qqplot(x = residuals)
qqplot(y = residuals)
?qqplot
plot(lm_fit, which = 2)
tibble(residuals) |>
ggplot(aes(sample = residuals)) +
stat_qq() +
stat_qq_line() +
theme_bw()
n <- 500
x <- rnorm(n)
y <- 1 + 2*x + rnorm(n)
data <- tibble(x, y)
lm_fit <- lm(y ~ x, data = data)
residuals <- rstandard(lm_fit)
tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram(bins = 20, color = "black") +
theme_bw()
tibble(residuals) |>
ggplot(aes(sample = residuals)) +
stat_qq() +
stat_qq_line() +
theme_bw()
library(cowplot)
plot_grid(p1, p2, ncol = 2)
p1 <- tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram(bins = 20, color = "black") +
labs(x = "Residual",
y = "Frequency")
theme_bw()
theme_bw()
p2 <- tibble(residuals) |>
ggplot(aes(sample = residuals)) +
stat_qq() +
stat_qq_line() +
labs(x = "Expected quantile",
y = "Observed quantile") +
theme_bw()
p1 <- tibble(residuals) |>
ggplot(aes(x = residuals)) +
geom_histogram(bins = 20, color = "black") +
labs(x = "Residual",
y = "Frequency") +
theme_bw()
p2 <- tibble(residuals) |>
ggplot(aes(sample = residuals)) +
stat_qq() +
stat_qq_line() +
labs(x = "Expected quantile",
y = "Observed quantile") +
theme_bw()
plot_grid(p1, p2, ncol = 2)
p <- 2
n <- 100
sqrt(p*qf(p = 0.95, df1 = p, df2 = n - p))/qt(p = 0.975, df = n - p)
(sqrt(p*qf(p = 0.95, df1 = p, df2 = n - p))/qt(p = 0.975, df = n - p))^2
library(tidyverse)
library(tidyverse)
set.seed(1)
n <- 25
p <- 2
x <- rnorm(n)
y <- 1 + 2*x + rnorm(n)
data <- tibble(x, y)
alpha <- 0.05
lm_fit <- lm(y ~ x, data = data)
predictions <- predict(lm_fit, se.fit = TRUE)
t_quantile <- qt(1 - alpha / 2, df = n - p)
f_quantile <- qf(1 - alpha, df1 = p, df2 = n - p)
t_quantile
sqrt(p * f_quantile)
sqrt(p * f_quantile) / t_quantile
data |>
mutate(
fit = predictions$fit,
se = predictions$se.fit,
ptwise_width = t_quantile * se,
simultaneous_width = sqrt(p * f_quantile) * se
)
0.495/0.392
data |>
mutate(
fit = predictions$fit,
se = predictions$se.fit,
ptwise_width = t_quantile * se,
simultaneous_width = sqrt(p * f_quantile) * se
) |>
ggplot(aes(x = x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = fit), color = "blue") +
geom_line(aes(y = fit + ptwise_width, color = "Pointwise")) +
geom_line(aes(y = fit - ptwise_width, color = "Pointwise")) +
geom_line(aes(y = fit + simultaneous_width, color = "Simultaneous")) +
geom_line(aes(y = fit - simultaneous_width, color = "Simultaneous")) +
theme_bw() +
theme(legend.title = element_blank(), legend.position = "bottom")
data |>
mutate(
fit = predictions$fit,
se = predictions$se.fit,
ptwise_width = t_quantile * se,
simultaneous_width = sqrt(p * f_quantile) * se
) |> arrange(x)
1.03 / 0.818
-3.27 - 0.818
-3.27 - 1.03
-3.27 + 0.818
-3.27 + 1.03
n <- 5
p <- 3
X <- matrix(rnorm(n*p), n, p)
X
solve(t(X) %*% X)
x_1_perp <- lm(X[,1] ~ X[,2] + X[,3])$residuals
sum(x_1_perp*x_1_perp)
1/sum(x_1_perp*x_1_perp)
x_1_perp <- lm(X[,1] ~ X[,2] + X[,3] + 0)$residuals
1/sum(x_1_perp*x_1_perp)
library(ggplot2)
library(ggplot2)
# define the Huber loss function
huber_loss <- function(x, delta) {
ifelse(abs(x) <= delta, 0.5 * x^2, delta * (abs(x) - delta))
}
# plot the Huber loss using stat_function()
delta <- 1
ggplot() +
stat_function(fun = huber_loss, args = list(delta = 1), geom = "line") +
labs(title = "Huber loss function")
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-5,5)) +
labs(title = "Huber loss function") +
theme_bw()
# define the Huber loss function
huber_loss <- function(x, delta) {
ifelse(abs(x) <= delta, 0.5 * x^2, delta * (abs(x) - 0.5*delta))
}
# plot the Huber loss using stat_function()
delta <- 1
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-5,5)) +
labs(title = "Huber loss function") +
theme_bw()
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-5,5)) +
labs(x = "expression(d)",
y = "expression(L_\delta(d))",
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-5,5)) +
labs(x = "expression(d)",
y = "expression(L[delta](d))",
title = "Huber loss function") +
theme_bw()
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-5,5)) +
labs(x = expression(d),
y = expression(L[delta](d)),
title = "Huber loss function") +
theme_bw()
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-4,4)) +
geom_point(aes(x = 1, y = huber_loss(1, delta)), color = "red", size = 3) +
geom_point(aes(x = -1, y = huber_loss(-1, delta)), color = "red", size = 3) +
labs(x = expression(d),
y = expression(L[delta](d)),
title = "Huber loss function") +
theme_bw()
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-4,4)) +
geom_point(aes(x = 1, y = huber_loss(1, delta)), color = "darkblue") +
geom_point(aes(x = -1, y = huber_loss(-1, delta)), color = "darkblue") +
labs(x = expression(d),
y = expression(L[delta](d)),
title = "Huber loss function") +
theme_bw()
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-4,4), aes(color = "Huber")) +
geom_point(aes(x = 1, y = huber_loss(1, delta)), color = "darkblue") +
geom_point(aes(x = -1, y = huber_loss(-1, delta)), color = "darkblue") +
labs(x = expression(d),
y = expression(L[delta](d)),
title = "Huber loss function") +
theme_bw()
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-4,4), aes(color = "Huber")) +
stat_function(fun = function(x) 0.5 * x^2,
geom = "line",
xlim = c(-4,4), aes(color = "Squared error")) +
geom_point(aes(x = 1, y = huber_loss(1, delta)), color = "darkblue") +
geom_point(aes(x = -1, y = huber_loss(-1, delta)), color = "darkblue") +
labs(x = expression(d),
y = expression(L[delta](d)),
title = "Huber loss function") +
theme_bw()
ggplot() +
stat_function(fun = huber_loss,
args = list(delta = 1),
geom = "line",
xlim = c(-4,4), aes(color = "Huber")) +
stat_function(fun = function(x) 0.5 * x^2,
geom = "line",
xlim = c(-4,4), aes(color = "Squared error")) +
# geom_point(aes(x = 1, y = huber_loss(1, delta)), color = "darkblue") +
# geom_point(aes(x = -1, y = huber_loss(-1, delta)), color = "darkblue") +
labs(x = expression(d),
y = expression(L[delta](d)),
title = "Huber loss function") +
scale_color_manual(values = c("darkblue", "darkred")) +
theme_bw() +
theme(legend.position = "bottom")
y <- 4
ggplot() +
stat_function(fun = function(mu)((mu - y)^2)) +
geom_vline(xintercept = y, linetype = "dashed") +
labs(x = expression(mu), y = expression(d(y, mu)))
library(ggplot2)
y <- 4
ggplot() +
stat_function(fun = function(mu)((mu - y)^2)) +
geom_vline(xintercept = y, linetype = "dashed") +
labs(x = expression(mu), y = expression(d(y, mu)))
ggplot() +
stat_function(fun = function(mu)((mu - y)^2), xlim = c(0, 8)) +
geom_vline(xintercept = y, linetype = "dashed") +
labs(x = expression(mu), y = expression(d(y, mu)))
ggplot() +
stat_function(fun = function(mu)((mu - y)^2), xlim = c(0, 8)) +
geom_vline(xintercept = y, linetype = "dashed") +
labs(x = expression(mu), y = expression(d(y, mu))) +
theme_bw()
#| label: fig-poisson-unit-deviance
library(ggplot2)
y <- 4
ggplot() +
stat_function(fun = function(mu)(2*(y*log(y/mu) - (y - mu))), xlim = c(0, 10)) +
geom_vline(xintercept = y, linetype = "dashed") +
labs(x = expression(mu), y = expression(d(y, mu))) +
theme_bw()
ggplot() +
stat_function(fun = function(mu)(2*(y*log(y/mu) - (y - mu))), xlim = c(0, 10)) +
geom_vline(xintercept = y, linetype = "dashed") +
labs(x = expression(mu), y = expression(d(y, mu))) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
theme_bw()
ggplot() +
stat_function(fun = function(mu)(2*(y*log(y/mu) - (y - mu))), xlim = c(0, 10)) +
geom_vline(xintercept = y, linetype = "dashed") +
labs(x = expression(mu), y = expression(d(y, mu))) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
coord_cartesian(ylim = c(0, 10)) +
theme_bw()
ggplot() +
stat_function(fun = function(mu)(2*(y*log(y/mu) - (y - mu))), xlim = c(0, 10)) +
geom_vline(xintercept = y, linetype = "dashed") +
labs(x = expression(mu), y = expression(d(y, mu))) +
scale_x_continuous(breaks = seq(0, 10, 2)) +
coord_cartesian(ylim = c(0, 11)) +
theme_bw()
![](figures/edms-exp-fams.pdf)
